trigger:
  branches:
    include:
      - main

parameters:
  - name: environment
    displayName: 'Target Environment'
    type: string
    default: 'dev'
    values:
      - dev
      - test
      - prod

variables:
  terraformVersion: '1.6.0'
  azureServiceConnection: 'Your-Service-Connection-Name'

  # Environment-specific configuration
  location: ${{ parameters.environment == 'prod' && 'eastus' || parameters.environment == 'test' && 'centralus' || 'westus' }}
  resourceGroup: ${{ parameters.environment }}-rg
  storageAccountName: tfstate${{ parameters.environment }}
  containerName: tfstate
  stateKey: terraform.${{ parameters.environment }}.tfstate

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Deploy
    displayName: 'Deploy to ${{ parameters.environment }}'
    jobs:
      - job: Terraform
        displayName: 'Terraform Deployment'
        steps:

          - task: UseTerraform@0
            inputs:
              terraformVersion: $(terraformVersion)

          - script: |
              terraform init \
                -backend-config="resource_group_name=$(resourceGroup)" \
                -backend-config="storage_account_name=$(storageAccountName)" \
                -backend-config="container_name=$(containerName)" \
                -backend-config="key=$(stateKey)"
            displayName: 'Terraform Init'

          - script: terraform validate
            displayName: 'Terraform Validate'

          - script: terraform plan -out=tfplan
            displayName: 'Terraform Plan'

          - script: terraform apply -auto-approve tfplan
            displayName: 'Terraform Apply'

          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "Deployment to ${{ parameters.environment }} complete in $(location)"
